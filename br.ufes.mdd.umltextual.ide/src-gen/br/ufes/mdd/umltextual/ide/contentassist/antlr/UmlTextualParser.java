/*
 * generated by Xtext 2.25.0
 */
package br.ufes.mdd.umltextual.ide.contentassist.antlr;

import br.ufes.mdd.umltextual.ide.contentassist.antlr.internal.InternalUmlTextualParser;
import br.ufes.mdd.umltextual.services.UmlTextualGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class UmlTextualParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(UmlTextualGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, UmlTextualGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPackageAccess().getTypeAlternatives_0_0(), "rule__Package__TypeAlternatives_0_0");
			builder.put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
			builder.put(grammarAccess.getAttributeTypeAccess().getAlternatives(), "rule__AttributeType__Alternatives");
			builder.put(grammarAccess.getMultiplicityAccess().getAlternatives(), "rule__Multiplicity__Alternatives");
			builder.put(grammarAccess.getAssociationConnectorAccess().getAlternatives(), "rule__AssociationConnector__Alternatives");
			builder.put(grammarAccess.getAssociationAccess().getNameAlternatives_2_0(), "rule__Association__NameAlternatives_2_0");
			builder.put(grammarAccess.getAggregationAccess().getNameAlternatives_1_0(), "rule__Aggregation__NameAlternatives_1_0");
			builder.put(grammarAccess.getCompositionAccess().getNameAlternatives_1_0(), "rule__Composition__NameAlternatives_1_0");
			builder.put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
			builder.put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
			builder.put(grammarAccess.getClassAccess().getGroup_0(), "rule__Class__Group_0__0");
			builder.put(grammarAccess.getClassAccess().getGroup_4(), "rule__Class__Group_4__0");
			builder.put(grammarAccess.getAttributeTypeAccess().getGroup_0(), "rule__AttributeType__Group_0__0");
			builder.put(grammarAccess.getAttributeTypeAccess().getGroup_1(), "rule__AttributeType__Group_1__0");
			builder.put(grammarAccess.getAttributeTypeAccess().getGroup_2(), "rule__AttributeType__Group_2__0");
			builder.put(grammarAccess.getAttributeTypeAccess().getGroup_3(), "rule__AttributeType__Group_3__0");
			builder.put(grammarAccess.getAttributeTypeAccess().getGroup_4(), "rule__AttributeType__Group_4__0");
			builder.put(grammarAccess.getAttributeTypeAccess().getGroup_5(), "rule__AttributeType__Group_5__0");
			builder.put(grammarAccess.getAttributeTypeAccess().getGroup_6(), "rule__AttributeType__Group_6__0");
			builder.put(grammarAccess.getAttributeTypeAccess().getGroup_7(), "rule__AttributeType__Group_7__0");
			builder.put(grammarAccess.getAttributeTypeAccess().getGroup_8(), "rule__AttributeType__Group_8__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_5(), "rule__Attribute__Group_5__0");
			builder.put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
			builder.put(grammarAccess.getAggregationAccess().getGroup(), "rule__Aggregation__Group__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup(), "rule__Composition__Group__0");
			builder.put(grammarAccess.getModelAccess().getPackagesAssignment(), "rule__Model__PackagesAssignment");
			builder.put(grammarAccess.getPackageAccess().getTypeAssignment_0(), "rule__Package__TypeAssignment_0");
			builder.put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
			builder.put(grammarAccess.getPackageAccess().getClassesAssignment_3(), "rule__Package__ClassesAssignment_3");
			builder.put(grammarAccess.getPackageAccess().getAssociationsAssignment_4(), "rule__Package__AssociationsAssignment_4");
			builder.put(grammarAccess.getClassAccess().getStereotypeAssignment_0_1(), "rule__Class__StereotypeAssignment_0_1");
			builder.put(grammarAccess.getClassAccess().getVisibilityAssignment_1(), "rule__Class__VisibilityAssignment_1");
			builder.put(grammarAccess.getClassAccess().getNameAssignment_3(), "rule__Class__NameAssignment_3");
			builder.put(grammarAccess.getClassAccess().getParentClassAssignment_4_1(), "rule__Class__ParentClassAssignment_4_1");
			builder.put(grammarAccess.getClassAccess().getAttributesAssignment_6(), "rule__Class__AttributesAssignment_6");
			builder.put(grammarAccess.getDomainSpecificTypeAccess().getNameAssignment(), "rule__DomainSpecificType__NameAssignment");
			builder.put(grammarAccess.getAttributeAccess().getVisibilityAssignment_0(), "rule__Attribute__VisibilityAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_2(), "rule__Attribute__NameAssignment_2");
			builder.put(grammarAccess.getAttributeAccess().getTypeAssignment_4(), "rule__Attribute__TypeAssignment_4");
			builder.put(grammarAccess.getAttributeAccess().getMultiplicityAssignment_5_1(), "rule__Attribute__MultiplicityAssignment_5_1");
			builder.put(grammarAccess.getAssociationAccess().getNameAssignment_2(), "rule__Association__NameAssignment_2");
			builder.put(grammarAccess.getAssociationAccess().getNavigation1Assignment_5(), "rule__Association__Navigation1Assignment_5");
			builder.put(grammarAccess.getAssociationAccess().getClass1Assignment_6(), "rule__Association__Class1Assignment_6");
			builder.put(grammarAccess.getAssociationAccess().getMultiplicity1Assignment_8(), "rule__Association__Multiplicity1Assignment_8");
			builder.put(grammarAccess.getAssociationAccess().getNavigation2Assignment_11(), "rule__Association__Navigation2Assignment_11");
			builder.put(grammarAccess.getAssociationAccess().getClass2Assignment_12(), "rule__Association__Class2Assignment_12");
			builder.put(grammarAccess.getAssociationAccess().getMultiplicity2Assignment_14(), "rule__Association__Multiplicity2Assignment_14");
			builder.put(grammarAccess.getAggregationAccess().getNameAssignment_1(), "rule__Aggregation__NameAssignment_1");
			builder.put(grammarAccess.getAggregationAccess().getClass1Assignment_4(), "rule__Aggregation__Class1Assignment_4");
			builder.put(grammarAccess.getAggregationAccess().getMultiplicity1Assignment_6(), "rule__Aggregation__Multiplicity1Assignment_6");
			builder.put(grammarAccess.getAggregationAccess().getNavigationAssignment_9(), "rule__Aggregation__NavigationAssignment_9");
			builder.put(grammarAccess.getAggregationAccess().getClass2Assignment_10(), "rule__Aggregation__Class2Assignment_10");
			builder.put(grammarAccess.getAggregationAccess().getMultiplicity2Assignment_12(), "rule__Aggregation__Multiplicity2Assignment_12");
			builder.put(grammarAccess.getCompositionAccess().getNameAssignment_1(), "rule__Composition__NameAssignment_1");
			builder.put(grammarAccess.getCompositionAccess().getClass1Assignment_4(), "rule__Composition__Class1Assignment_4");
			builder.put(grammarAccess.getCompositionAccess().getMultiplicity1Assignment_6(), "rule__Composition__Multiplicity1Assignment_6");
			builder.put(grammarAccess.getCompositionAccess().getNavigationAssignment_9(), "rule__Composition__NavigationAssignment_9");
			builder.put(grammarAccess.getCompositionAccess().getClass2Assignment_10(), "rule__Composition__Class2Assignment_10");
			builder.put(grammarAccess.getCompositionAccess().getMultiplicity2Assignment_12(), "rule__Composition__Multiplicity2Assignment_12");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private UmlTextualGrammarAccess grammarAccess;

	@Override
	protected InternalUmlTextualParser createParser() {
		InternalUmlTextualParser result = new InternalUmlTextualParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public UmlTextualGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(UmlTextualGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
