/**
 * generated by Xtext 2.25.0
 */
package br.ufes.mdd.umltextual.umlTextual.impl;

import br.ufes.mdd.umltextual.umlTextual.Actor;
import br.ufes.mdd.umltextual.umlTextual.ActorUseCaseAssociation;
import br.ufes.mdd.umltextual.umlTextual.UmlTextualPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Actor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.ufes.mdd.umltextual.umlTextual.impl.ActorImpl#getVisibility <em>Visibility</em>}</li>
 *   <li>{@link br.ufes.mdd.umltextual.umlTextual.impl.ActorImpl#getAbstract <em>Abstract</em>}</li>
 *   <li>{@link br.ufes.mdd.umltextual.umlTextual.impl.ActorImpl#getActive <em>Active</em>}</li>
 *   <li>{@link br.ufes.mdd.umltextual.umlTextual.impl.ActorImpl#getBusiness <em>Business</em>}</li>
 *   <li>{@link br.ufes.mdd.umltextual.umlTextual.impl.ActorImpl#getParentActor <em>Parent Actor</em>}</li>
 *   <li>{@link br.ufes.mdd.umltextual.umlTextual.impl.ActorImpl#getUseCases <em>Use Cases</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActorImpl extends UseCaseElementImpl implements Actor
{
  /**
   * The default value of the '{@link #getVisibility() <em>Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibility()
   * @generated
   * @ordered
   */
  protected static final String VISIBILITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVisibility() <em>Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibility()
   * @generated
   * @ordered
   */
  protected String visibility = VISIBILITY_EDEFAULT;

  /**
   * The default value of the '{@link #getAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAbstract()
   * @generated
   * @ordered
   */
  protected static final String ABSTRACT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAbstract()
   * @generated
   * @ordered
   */
  protected String abstract_ = ABSTRACT_EDEFAULT;

  /**
   * The default value of the '{@link #getActive() <em>Active</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActive()
   * @generated
   * @ordered
   */
  protected static final String ACTIVE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getActive() <em>Active</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActive()
   * @generated
   * @ordered
   */
  protected String active = ACTIVE_EDEFAULT;

  /**
   * The default value of the '{@link #getBusiness() <em>Business</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBusiness()
   * @generated
   * @ordered
   */
  protected static final String BUSINESS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBusiness() <em>Business</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBusiness()
   * @generated
   * @ordered
   */
  protected String business = BUSINESS_EDEFAULT;

  /**
   * The cached value of the '{@link #getParentActor() <em>Parent Actor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParentActor()
   * @generated
   * @ordered
   */
  protected Actor parentActor;

  /**
   * The cached value of the '{@link #getUseCases() <em>Use Cases</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUseCases()
   * @generated
   * @ordered
   */
  protected EList<ActorUseCaseAssociation> useCases;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UmlTextualPackage.Literals.ACTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVisibility()
  {
    return visibility;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVisibility(String newVisibility)
  {
    String oldVisibility = visibility;
    visibility = newVisibility;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlTextualPackage.ACTOR__VISIBILITY, oldVisibility, visibility));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAbstract()
  {
    return abstract_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAbstract(String newAbstract)
  {
    String oldAbstract = abstract_;
    abstract_ = newAbstract;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlTextualPackage.ACTOR__ABSTRACT, oldAbstract, abstract_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getActive()
  {
    return active;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setActive(String newActive)
  {
    String oldActive = active;
    active = newActive;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlTextualPackage.ACTOR__ACTIVE, oldActive, active));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBusiness()
  {
    return business;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBusiness(String newBusiness)
  {
    String oldBusiness = business;
    business = newBusiness;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlTextualPackage.ACTOR__BUSINESS, oldBusiness, business));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Actor getParentActor()
  {
    return parentActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParentActor(Actor newParentActor, NotificationChain msgs)
  {
    Actor oldParentActor = parentActor;
    parentActor = newParentActor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UmlTextualPackage.ACTOR__PARENT_ACTOR, oldParentActor, newParentActor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParentActor(Actor newParentActor)
  {
    if (newParentActor != parentActor)
    {
      NotificationChain msgs = null;
      if (parentActor != null)
        msgs = ((InternalEObject)parentActor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UmlTextualPackage.ACTOR__PARENT_ACTOR, null, msgs);
      if (newParentActor != null)
        msgs = ((InternalEObject)newParentActor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UmlTextualPackage.ACTOR__PARENT_ACTOR, null, msgs);
      msgs = basicSetParentActor(newParentActor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlTextualPackage.ACTOR__PARENT_ACTOR, newParentActor, newParentActor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ActorUseCaseAssociation> getUseCases()
  {
    if (useCases == null)
    {
      useCases = new EObjectContainmentEList<ActorUseCaseAssociation>(ActorUseCaseAssociation.class, this, UmlTextualPackage.ACTOR__USE_CASES);
    }
    return useCases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UmlTextualPackage.ACTOR__PARENT_ACTOR:
        return basicSetParentActor(null, msgs);
      case UmlTextualPackage.ACTOR__USE_CASES:
        return ((InternalEList<?>)getUseCases()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UmlTextualPackage.ACTOR__VISIBILITY:
        return getVisibility();
      case UmlTextualPackage.ACTOR__ABSTRACT:
        return getAbstract();
      case UmlTextualPackage.ACTOR__ACTIVE:
        return getActive();
      case UmlTextualPackage.ACTOR__BUSINESS:
        return getBusiness();
      case UmlTextualPackage.ACTOR__PARENT_ACTOR:
        return getParentActor();
      case UmlTextualPackage.ACTOR__USE_CASES:
        return getUseCases();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UmlTextualPackage.ACTOR__VISIBILITY:
        setVisibility((String)newValue);
        return;
      case UmlTextualPackage.ACTOR__ABSTRACT:
        setAbstract((String)newValue);
        return;
      case UmlTextualPackage.ACTOR__ACTIVE:
        setActive((String)newValue);
        return;
      case UmlTextualPackage.ACTOR__BUSINESS:
        setBusiness((String)newValue);
        return;
      case UmlTextualPackage.ACTOR__PARENT_ACTOR:
        setParentActor((Actor)newValue);
        return;
      case UmlTextualPackage.ACTOR__USE_CASES:
        getUseCases().clear();
        getUseCases().addAll((Collection<? extends ActorUseCaseAssociation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UmlTextualPackage.ACTOR__VISIBILITY:
        setVisibility(VISIBILITY_EDEFAULT);
        return;
      case UmlTextualPackage.ACTOR__ABSTRACT:
        setAbstract(ABSTRACT_EDEFAULT);
        return;
      case UmlTextualPackage.ACTOR__ACTIVE:
        setActive(ACTIVE_EDEFAULT);
        return;
      case UmlTextualPackage.ACTOR__BUSINESS:
        setBusiness(BUSINESS_EDEFAULT);
        return;
      case UmlTextualPackage.ACTOR__PARENT_ACTOR:
        setParentActor((Actor)null);
        return;
      case UmlTextualPackage.ACTOR__USE_CASES:
        getUseCases().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UmlTextualPackage.ACTOR__VISIBILITY:
        return VISIBILITY_EDEFAULT == null ? visibility != null : !VISIBILITY_EDEFAULT.equals(visibility);
      case UmlTextualPackage.ACTOR__ABSTRACT:
        return ABSTRACT_EDEFAULT == null ? abstract_ != null : !ABSTRACT_EDEFAULT.equals(abstract_);
      case UmlTextualPackage.ACTOR__ACTIVE:
        return ACTIVE_EDEFAULT == null ? active != null : !ACTIVE_EDEFAULT.equals(active);
      case UmlTextualPackage.ACTOR__BUSINESS:
        return BUSINESS_EDEFAULT == null ? business != null : !BUSINESS_EDEFAULT.equals(business);
      case UmlTextualPackage.ACTOR__PARENT_ACTOR:
        return parentActor != null;
      case UmlTextualPackage.ACTOR__USE_CASES:
        return useCases != null && !useCases.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (visibility: ");
    result.append(visibility);
    result.append(", abstract: ");
    result.append(abstract_);
    result.append(", active: ");
    result.append(active);
    result.append(", business: ");
    result.append(business);
    result.append(')');
    return result.toString();
  }

} //ActorImpl
