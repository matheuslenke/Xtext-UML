/*
 * generated by Xtext 2.25.0
 */
package br.ufes.mdd.umltextual.serializer;

import br.ufes.mdd.umltextual.services.UmlTextualGrammarAccess;
import br.ufes.mdd.umltextual.umlTextual.Actor;
import br.ufes.mdd.umltextual.umlTextual.Aggregation;
import br.ufes.mdd.umltextual.umlTextual.Association;
import br.ufes.mdd.umltextual.umlTextual.Attribute;
import br.ufes.mdd.umltextual.umlTextual.AttributeType;
import br.ufes.mdd.umltextual.umlTextual.Composition;
import br.ufes.mdd.umltextual.umlTextual.DomainSpecificType;
import br.ufes.mdd.umltextual.umlTextual.Interface;
import br.ufes.mdd.umltextual.umlTextual.Method;
import br.ufes.mdd.umltextual.umlTextual.Model;
import br.ufes.mdd.umltextual.umlTextual.UmlTextualPackage;
import br.ufes.mdd.umltextual.umlTextual.UseCase;
import br.ufes.mdd.umltextual.umlTextual.UseCaseDiagram;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class UmlTextualSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UmlTextualGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UmlTextualPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UmlTextualPackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case UmlTextualPackage.AGGREGATION:
				sequence_Aggregation(context, (Aggregation) semanticObject); 
				return; 
			case UmlTextualPackage.ASSOCIATION:
				sequence_Association(context, (Association) semanticObject); 
				return; 
			case UmlTextualPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case UmlTextualPackage.ATTRIBUTE_TYPE:
				sequence_AttributeType(context, (AttributeType) semanticObject); 
				return; 
			case UmlTextualPackage.CLASS:
				sequence_Class(context, (br.ufes.mdd.umltextual.umlTextual.Class) semanticObject); 
				return; 
			case UmlTextualPackage.COMPOSITION:
				sequence_Composition(context, (Composition) semanticObject); 
				return; 
			case UmlTextualPackage.DOMAIN_SPECIFIC_TYPE:
				sequence_DomainSpecificType(context, (DomainSpecificType) semanticObject); 
				return; 
			case UmlTextualPackage.INTERFACE:
				sequence_Interface(context, (Interface) semanticObject); 
				return; 
			case UmlTextualPackage.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case UmlTextualPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case UmlTextualPackage.PACKAGE:
				sequence_Package(context, (br.ufes.mdd.umltextual.umlTextual.Package) semanticObject); 
				return; 
			case UmlTextualPackage.PARAMETER:
				sequence_Parameter(context, (br.ufes.mdd.umltextual.umlTextual.Parameter) semanticObject); 
				return; 
			case UmlTextualPackage.USE_CASE:
				sequence_UseCase(context, (UseCase) semanticObject); 
				return; 
			case UmlTextualPackage.USE_CASE_DIAGRAM:
				sequence_UseCaseDiagram(context, (UseCaseDiagram) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     UseCaseElement returns Actor
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     (
	 *         visibility=Visibility? 
	 *         abstract=Abstract? 
	 *         active=Active? 
	 *         business='business'? 
	 *         name=ID 
	 *         parentActor=Actor? 
	 *         (useCases+=[UseCase|ID] useCases+=[UseCase|ID]*)*
	 *     )
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Aggregation
	 *     AssociationConnector returns Aggregation
	 *     Aggregation returns Aggregation
	 *
	 * Constraint:
	 *     (
	 *         (name=ID | name=Unnamed) 
	 *         class1=[Class|ID] 
	 *         multiplicity1=Multiplicity 
	 *         navigation=Navigation? 
	 *         class2=[Class|ID] 
	 *         multiplicity2=Multiplicity
	 *     )
	 */
	protected void sequence_Aggregation(ISerializationContext context, Aggregation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Association
	 *     AssociationConnector returns Association
	 *     Association returns Association
	 *
	 * Constraint:
	 *     (
	 *         (name=ID | name=Unnamed) 
	 *         navigation1=Navigation? 
	 *         class1=[Class|ID] 
	 *         multiplicity1=Multiplicity 
	 *         navigation2=Navigation? 
	 *         class2=[Class|ID] 
	 *         multiplicity2=Multiplicity 
	 *         class=[Class|ID]?
	 *     )
	 */
	protected void sequence_Association(ISerializationContext context, Association semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeType returns AttributeType
	 *
	 * Constraint:
	 *     (
	 *         name='string' | 
	 *         name='int' | 
	 *         name='double' | 
	 *         name='boolean' | 
	 *         name='byte' | 
	 *         name='char' | 
	 *         name='float' | 
	 *         name='short' | 
	 *         name='long' | 
	 *         domainType=[DomainSpecificType|ID]
	 *     )
	 */
	protected void sequence_AttributeType(ISerializationContext context, AttributeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (visibility=Visibility? name=ID type=AttributeType multiplicity=Multiplicity?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Class
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (
	 *         stereotype=ID? 
	 *         visibility=Visibility? 
	 *         name=ID 
	 *         parentClass=[Class|ID]? 
	 *         (interfaces+=[Interface|ID] interfaces+=[Interface|ID]*)? 
	 *         attributes+=Attribute* 
	 *         methods+=Method*
	 *     )
	 */
	protected void sequence_Class(ISerializationContext context, br.ufes.mdd.umltextual.umlTextual.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Composition
	 *     AssociationConnector returns Composition
	 *     Composition returns Composition
	 *
	 * Constraint:
	 *     (
	 *         (name=ID | name=Unnamed) 
	 *         class1=[Class|ID] 
	 *         multiplicity1=Multiplicity 
	 *         navigation=Navigation? 
	 *         class2=[Class|ID] 
	 *         multiplicity2=Multiplicity
	 *     )
	 */
	protected void sequence_Composition(ISerializationContext context, Composition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DomainSpecificType returns DomainSpecificType
	 *
	 * Constraint:
	 *     (name=ID description=STRING)
	 */
	protected void sequence_DomainSpecificType(ISerializationContext context, DomainSpecificType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UmlTextualPackage.Literals.DOMAIN_SPECIFIC_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UmlTextualPackage.Literals.DOMAIN_SPECIFIC_TYPE__NAME));
			if (transientValues.isValueTransient(semanticObject, UmlTextualPackage.Literals.DOMAIN_SPECIFIC_TYPE__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UmlTextualPackage.Literals.DOMAIN_SPECIFIC_TYPE__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDomainSpecificTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDomainSpecificTypeAccess().getDescriptionSTRINGTerminalRuleCall_3_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Interface
	 *     Interface returns Interface
	 *
	 * Constraint:
	 *     (stereotype=ID? visibility=Visibility? name=ID parentInterface=[Interface|ID]? attributes+=Attribute*)
	 */
	protected void sequence_Interface(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (visibility=Visibility? name=ID parameters+=Parameter? parameters+=Parameter* returnType=AttributeType)
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=ModelElement+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns Package
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (
	 *         instantiable='instantiable'? 
	 *         (type='package' | type='subsystem') 
	 *         name=ID 
	 *         parentPackage=[Package|ID]? 
	 *         domainSpecificTypes+=DomainSpecificType* 
	 *         elements+=Element*
	 *     )
	 */
	protected void sequence_Package(ISerializationContext context, br.ufes.mdd.umltextual.umlTextual.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=ID parameterType=AttributeType)
	 */
	protected void sequence_Parameter(ISerializationContext context, br.ufes.mdd.umltextual.umlTextual.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UmlTextualPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UmlTextualPackage.Literals.PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, UmlTextualPackage.Literals.PARAMETER__PARAMETER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UmlTextualPackage.Literals.PARAMETER__PARAMETER_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getParameterTypeAttributeTypeParserRuleCall_2_0(), semanticObject.getParameterType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns UseCaseDiagram
	 *     UseCaseDiagram returns UseCaseDiagram
	 *
	 * Constraint:
	 *     (name=ID elements+=UseCaseElement*)
	 */
	protected void sequence_UseCaseDiagram(ISerializationContext context, UseCaseDiagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UseCaseElement returns UseCase
	 *     UseCase returns UseCase
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         includedUseCases+=[UseCase|ID]? 
	 *         extendedUseCases+=[UseCase|ID]? 
	 *         description=STRING 
	 *         (
	 *             (includedUseCases+=[UseCase|ID] includedUseCases+=[UseCase|ID]* extendedUseCases+=[UseCase|ID] extendedUseCases+=[UseCase|ID]*) | 
	 *             (extendedUseCases+=[UseCase|ID] extendedUseCases+=[UseCase|ID]* includedUseCases+=[UseCase|ID] includedUseCases+=[UseCase|ID]*)
	 *         )?
	 *     )
	 */
	protected void sequence_UseCase(ISerializationContext context, UseCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
