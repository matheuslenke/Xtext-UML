grammar br.ufes.mdd.umltextual.ClassDiagram with br.ufes.mdd.umltextual.UseCaseDiagram

generate classDiagram "http://www.ufes.br/mdd/umltextual/classDiagram"


Element:
	Class | AssociationConnector | Interface
;


Class:
	('@'stereotype=ID)?
	visibility=Visibility? 'class' name=ID ('extends' parentClass=[Class])? ('implements' interface+=[Interface] (',' interface+=[Interface])*)? '{'
	attributes+=Attribute*
	methods+=Method*
	'}'
;

Interface:
	('@'stereotype=ID)?
	visibility=Visibility? 'interface' name=ID ('extends' parentInterface=[Interface])? '{'
	attributes+=Attribute*
	'}'
;


AttributeType:
	name="string" | name="int"  | name="double" | name="boolean" |
	name="byte"   | name="char" | name="float"  | name="short" |
	name="long"   | domainType=[DomainSpecificType]
;

DomainSpecificType:
	'domaintype' name=ID '=' description=STRING
	// Lembrar de modificar para declarar no começo da classe os tipos específicos de domínio
;

Multiplicity:
	"1" | "0..1" | "0..*" | "*" | "1..*" | "0.."INT | "1.."INT | INT | INT".."INT
	// Da pra generalizar pra INT | '*' | INT".."(INT | '*')
;

Attribute:
	visibility=(Visibility)? 'attr' name=ID ':' type=AttributeType ("[" multiplicity=Multiplicity "]")?
;

Method:
	'abstract'? 'static'? visibility=(Visibility)? 'function' name=ID '(' (parameters+=Parameter (','parameters+=Parameter)*)? ')' '->' returnType=AttributeType
;

Parameter:
	name=ID ':' parameterType=AttributeType
;

// <---- Relações ---->

Unnamed:
	"unnamed"	
;

Navigation:
	"navigable"
;

AssociationConnector:
	Association | Aggregation | Composition
;

Association:
	'undirected'? 'association' name= (ID | Unnamed) '{'
		'from' navigation1=Navigation?  class1=[Class]'['multiplicity1=Multiplicity ']' 
		'to'   navigation2=Navigation?  class2=[Class]'['multiplicity2=Multiplicity ']'
		('with' 'associatedclass' class=[Class])?
	'}'
;

Aggregation:
	'aggregation' name= (ID | Unnamed) '{'
		'from' class1=[Class]'['multiplicity1=Multiplicity ']'
		'to' navigation=Navigation? class2=[Class]'['multiplicity2=Multiplicity ']'
	'}'
;

Composition:
	'composition' name= (ID | Unnamed) '{'
		'from' class1=[Class]'['multiplicity1=Multiplicity ']'
		'to' navigation=Navigation? class2=[Class]'['multiplicity2=Multiplicity ']'
	'}'
;