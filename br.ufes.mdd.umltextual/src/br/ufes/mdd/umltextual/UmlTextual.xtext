grammar br.ufes.mdd.umltextual.UmlTextual with org.eclipse.xtext.common.Terminals

generate umlTextual "http://www.ufes.br/mdd/umltextual/UmlTextual"

	
Model:
	elements+=ModelElement*
;
	
ModelElement:
	Package | UseCaseDiagram
;
	
// <--- Diagrama de Pacotes --->
	
Package:
	(instantiable='instantiable')? type=('package' | 'subsystem') name=ID ('depends' 'on' parentPackage=[Package])? '{'
	domainSpecificTypes+=DomainSpecificType*
	elements+=Element*
	'}'
;

QualifiedName:
	ID ('.' ID)*
;

// <--- Diagrama de Classes --->

Element:
	Class | AssociationConnector | Interface
;


Class:
	('@'stereotype=ID)?
	visibility=Visibility? 'class' name=ID ('extends' parentClass=[Class|QualifiedName])? 
	('implements' interfaces+=[Interface|QualifiedName] (',' interfaces+=[Interface|QualifiedName])*)? '{'
	attributes+=Attribute*
	methods+=Method*
	'}'
;

Interface:
	('@'stereotype=ID)?
	visibility=Visibility? 'interface' name=ID ('extends' parentInterface=[Interface|QualifiedName])? '{'
	attributes+=Attribute*
	methods+=Method*
	'}'
;

Visibility:
	"public" | "private" | "protected" | "package"
;

Abstract:
	'abstract'
;

Active:
	'active'
;

AttributeType:
	name="string" | name="int"  | name="double" | name="boolean" |
	name="byte"   | name="char" | name="float"  | name="short" |
	name="long"   | domainType=[DomainSpecificType|QualifiedName]
;

DomainSpecificType:
	'domaintype' name=ID '=' description=STRING
;

Multiplicity:
	"1" | "0..1" | "0..*" | "*" | "1..*" | "0.."INT | "1.."INT | INT | INT".."INT
;

Attribute:
	visibility=(Visibility)? 'attr' name=ID ':' type=AttributeType ("[" multiplicity=Multiplicity "]")?
;

Method:
	'abstract'? 'static'? visibility=(Visibility)? 'function' name=ID 
	'(' (parameters+=Parameter (','parameters+=Parameter)*)? ')' '->' returnType=AttributeType
;

Parameter:
	name=ID ':' parameterType=AttributeType
;

// <---- Relações ---->

Unnamed:
	"unnamed"	
;

Navigation:
	"navigable"
;

AssociationConnector:
	Association | Aggregation | Composition
;

Association:
	'undirected'? 'association' name= (ID | Unnamed) '{'
		'from' navigation1=Navigation?  class1=[Class|QualifiedName]'['multiplicity1=Multiplicity ']' 
		'to'   navigation2=Navigation?  class2=[Class|QualifiedName]'['multiplicity2=Multiplicity ']'
		('with' 'associatedclass' class=[Class|QualifiedName])?
	'}'
;

Aggregation:
	'aggregation' name= (ID | Unnamed) '{'
		'from' class1=[Class|QualifiedName]'['multiplicity1=Multiplicity ']'
		'to' navigation=Navigation? class2=[Class|QualifiedName]'['multiplicity2=Multiplicity ']'
	'}'
;

Composition:
	'composition' name= (ID | Unnamed) '{'
		'from' class1=[Class|QualifiedName]'['multiplicity1=Multiplicity ']'
		'to' navigation=Navigation? class2=[Class|QualifiedName]'['multiplicity2=Multiplicity ']'
	'}'
;

// <--- Gramática do diagrama de Casos de Uso --->

UseCaseDiagram:
	'usecase' 'diagram' name=ID '{'
		elements+=UseCaseElement*
	'}'
;

UseCaseElement:
	Actor | UseCase
;

Actor:
	(visibility=Visibility)? (abstract=Abstract)? (active=Active)? (business='business')? 
	'actor' name=ID ('extends' parentActor=[Actor|QualifiedName])? '{'
		('uses' useCases+=[UseCase|QualifiedName] (','useCases+=[UseCase|QualifiedName])*)*
	'}'
;

UseCase:
	'usecase' name=ID  ('includes' includedUseCases+=[UseCase|QualifiedName])? 
	('extends' extendedUseCases+=[UseCase|QualifiedName])? '=' description=STRING
	('{'
		('includes' includedUseCases+=[UseCase|QualifiedName] (','includedUseCases+=[UseCase|QualifiedName])*
		 'extends'  extendedUseCases+=[UseCase|QualifiedName] (','extendedUseCases+=[UseCase|QualifiedName])*
		|
		 'extends'  extendedUseCases+=[UseCase|QualifiedName] (','extendedUseCases+=[UseCase|QualifiedName])*
		 'includes' includedUseCases+=[UseCase|QualifiedName] (','includedUseCases+=[UseCase|QualifiedName])*)
	'}')?
;


